/*
 * Esta classe fornece a matriz de rigidez de um elemento finito tridimensional
 * O método requer a largura, o comprimento, a altura e o número de nós do elemento finito
 * A matriz de rigidez calculada já considera todos os parâmetros
 */

package app.finiteelement;

/**
 *
 * @author André de Sousa
 */
public class MatrixK_3D {

    /**
     * Este método fornece a matriz de rigidez de um elemento finito tridimensional
     *
     * @param a é a largura do elemento finito
     * @param b é o comprimento do elemento finito
     * @param c é a altura do elemento finito
     * @param nodes é o número de nós do elemento finito
     * @param matrixD é a matriz de elasticidade do elemento finito
     * @return
     */
    public static double[][] matrixK_3D(double a, double b, double c, int nodes, double[][] matrixD) {
        double[][] matrixK;

        if (a != 0 && b != 0 && c != 0 && nodes > 1) {
            double D1, D2, D3;

            D1 = matrixD[0][0];
            D2 = matrixD[1][0];
            D3 = matrixD[5][5];

            if (nodes == 4) {
                matrixK = new double[12][12];

                matrixK[0][0] = ((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (6 * a * b * c);
                matrixK[0][1] = (c * D3 + c * D2) / 6;
                matrixK[0][2] = (b * D3 + b * D2) / 6;
                matrixK[0][3] = -(b * c * D1) / (6 * a);
                matrixK[0][4] = -(c * D3) / 6;
                matrixK[0][5] = -(b * D3) / 6;
                matrixK[0][6] = -(a * c * D3) / (6 * b);
                matrixK[0][7] = -(c * D2) / 6;
                matrixK[0][8] = 0;
                matrixK[0][9] = -(a * b * D3) / (6 * c);
                matrixK[0][10] = 0;
                matrixK[0][11] = -(b * D2) / 6;

                matrixK[1][0] = (c * D3 + c * D2) / 6;
                matrixK[1][1] = ((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (6 * a * b * c);
                matrixK[1][2] = (a * D3 + a * D2) / 6;
                matrixK[1][3] = -(c * D2) / 6;
                matrixK[1][4] = -(b * c * D3) / (6 * a);
                matrixK[1][5] = 0;
                matrixK[1][6] = -(c * D3) / 6;
                matrixK[1][7] = -(a * c * D1) / (6 * b);
                matrixK[1][8] = -(a * D3) / 6;
                matrixK[1][9] = 0;
                matrixK[1][10] = -(a * b * D3) / (6 * c);
                matrixK[1][11] = -(a * D2) / 6;

                matrixK[2][0] = (b * D3 + b * D2) / 6;
                matrixK[2][1] = (a * D3 + a * D2) / 6;
                matrixK[2][2] = ((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (6 * a * b * c);
                matrixK[2][3] = -(b * D2) / 6;
                matrixK[2][4] = 0;
                matrixK[2][5] = -(b * c * D3) / (6 * a);
                matrixK[2][6] = 0;
                matrixK[2][7] = -(a * D2) / 6;
                matrixK[2][8] = -(a * c * D3) / (6 * b);
                matrixK[2][9] = -(b * D3) / 6;
                matrixK[2][10] = -(a * D3) / 6;
                matrixK[2][11] = -(a * b * D1) / (6 * c);

                matrixK[3][0] = -(b * c * D1) / (6 * a);
                matrixK[3][1] = -(c * D2) / 6;
                matrixK[3][2] = -(b * D2) / 6;
                matrixK[3][3] = (b * c * D1) / (6 * a);
                matrixK[3][4] = 0;
                matrixK[3][5] = 0;
                matrixK[3][6] = 0;
                matrixK[3][7] = (c * D2) / 6;
                matrixK[3][8] = 0;
                matrixK[3][9] = 0;
                matrixK[3][10] = 0;
                matrixK[3][11] = (b * D2) / 6;

                matrixK[4][0] = -(c * D3) / 6;
                matrixK[4][1] = -(b * c * D3) / (6 * a);
                matrixK[4][2] = 0;
                matrixK[4][3] = 0;
                matrixK[4][4] = (b * c * D3) / (6 * a);
                matrixK[4][5] = 0;
                matrixK[4][6] = (c * D3) / 6;
                matrixK[4][7] = 0;
                matrixK[4][8] = 0;
                matrixK[4][9] = 0;
                matrixK[4][10] = 0;
                matrixK[4][11] = 0;

                matrixK[5][0] = -(b * D3) / 6;
                matrixK[5][1] = 0;
                matrixK[5][2] = -(b * c * D3) / (6 * a);
                matrixK[5][3] = 0;
                matrixK[5][4] = 0;
                matrixK[5][5] = (b * c * D3) / (6 * a);
                matrixK[5][6] = 0;
                matrixK[5][7] = 0;
                matrixK[5][8] = 0;
                matrixK[5][9] = (b * D3) / 6;
                matrixK[5][10] = 0;
                matrixK[5][11] = 0;

                matrixK[6][0] = -(a * c * D3) / (6 * b);
                matrixK[6][1] = -(c * D3) / 6;
                matrixK[6][2] = 0;
                matrixK[6][3] = 0;
                matrixK[6][4] = (c * D3) / 6;
                matrixK[6][5] = 0;
                matrixK[6][6] = (a * c * D3) / (6 * b);
                matrixK[6][7] = 0;
                matrixK[6][8] = 0;
                matrixK[6][9] = 0;
                matrixK[6][10] = 0;
                matrixK[6][11] = 0;

                matrixK[7][0] = -(c * D2) / 6;
                matrixK[7][1] = -(a * c * D1) / (6 * b);
                matrixK[7][2] = -(a * D2) / 6;
                matrixK[7][3] = (c * D2) / 6;
                matrixK[7][4] = 0;
                matrixK[7][5] = 0;
                matrixK[7][6] = 0;
                matrixK[7][7] = (a * c * D1) / (6 * b);
                matrixK[7][8] = 0;
                matrixK[7][9] = 0;
                matrixK[7][10] = 0;
                matrixK[7][11] = (a * D2) / 6;

                matrixK[8][0] = 0;
                matrixK[8][1] = -(a * D3) / 6;
                matrixK[8][2] = -(a * c * D3) / (6 * b);
                matrixK[8][3] = 0;
                matrixK[8][4] = 0;
                matrixK[8][5] = 0;
                matrixK[8][6] = 0;
                matrixK[8][7] = 0;
                matrixK[8][8] = (a * c * D3) / (6 * b);
                matrixK[8][9] = 0;
                matrixK[8][10] = (a * D3) / 6;
                matrixK[8][11] = 0;

                matrixK[9][0] = -(a * b * D3) / (6 * c);
                matrixK[9][1] = 0;
                matrixK[9][2] = -(b * D3) / 6;
                matrixK[9][3] = 0;
                matrixK[9][4] = 0;
                matrixK[9][5] = (b * D3) / 6;
                matrixK[9][6] = 0;
                matrixK[9][7] = 0;
                matrixK[9][8] = 0;
                matrixK[9][9] = (a * b * D3) / (6 * c);
                matrixK[9][10] = 0;
                matrixK[9][11] = 0;

                matrixK[10][0] = 0;
                matrixK[10][1] = -(a * b * D3) / (6 * c);
                matrixK[10][2] = -(a * D3) / 6;
                matrixK[10][3] = 0;
                matrixK[10][4] = 0;
                matrixK[10][5] = 0;
                matrixK[10][6] = 0;
                matrixK[10][7] = 0;
                matrixK[10][8] = (a * D3) / 6;
                matrixK[10][9] = 0;
                matrixK[10][10] = (a * b * D3) / (6 * c);
                matrixK[10][11] = 0;

                matrixK[11][0] = -(b * D2) / 6;
                matrixK[11][1] = -(a * D2) / 6;
                matrixK[11][2] = -(a * b * D1) / (6 * c);
                matrixK[11][3] = (b * D2) / 6;
                matrixK[11][4] = 0;
                matrixK[11][5] = 0;
                matrixK[11][6] = 0;
                matrixK[11][7] = (a * D2) / 6;
                matrixK[11][8] = 0;
                matrixK[11][9] = 0;
                matrixK[11][10] = 0;
                matrixK[11][11] = (a * b * D1) / (6 * c);
            } else if (nodes == 8) {
                matrixK = new double[24][24];

                matrixK[0][0] = ((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (9 * a * b * c);
                matrixK[0][1] = (c * D3 + c * D2) / 12;
                matrixK[0][2] = (b * D3 + b * D2) / 12;
                matrixK[0][3] = ((a * a * c * c + a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (18 * a * b * c);
                matrixK[0][4] = -(c * D3 - c * D2) / 12;
                matrixK[0][5] = -(b * D3 - b * D2) / 12;
                matrixK[0][6] = -((2 * a * a * c * c - a * a * b * b) * D3 + 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[0][7] = -(c * D3 + c * D2) / 12;
                matrixK[0][8] = -(b * D3 - b * D2) / 24;
                matrixK[0][9] = -((2 * a * a * c * c - a * a * b * b) * D3 - b * b * c * c * D1) / (18 * a * b * c);
                matrixK[0][10] = (c * D3 - c * D2) / 12;
                matrixK[0][11] = (b * D3 + b * D2) / 24;
                matrixK[0][12] = ((a * a * c * c - 2 * a * a * b * b) * D3 + b * b * c * c * D1) / (18 * a * b * c);
                matrixK[0][13] = (c * D3 + c * D2) / 24;
                matrixK[0][14] = (b * D3 - b * D2) / 12;
                matrixK[0][15] = ((a * a * c * c - 2 * a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[0][16] = -(c * D3 - c * D2) / 24;
                matrixK[0][17] = -(b * D3 + b * D2) / 12;
                matrixK[0][18] = -((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (36 * a * b * c);
                matrixK[0][19] = -(c * D3 + c * D2) / 24;
                matrixK[0][20] = -(b * D3 + b * D2) / 24;
                matrixK[0][21] = -((2 * a * a * c * c + 2 * a * a * b * b) * D3 - b * b * c * c * D1) / (36 * a * b * c);
                matrixK[0][22] = (c * D3 - c * D2) / 24;
                matrixK[0][23] = (b * D3 - b * D2) / 24;

                matrixK[1][0] = (c * D3 + c * D2) / 12;
                matrixK[1][1] = ((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (9 * a * b * c);
                matrixK[1][2] = (a * D3 + a * D2) / 12;
                matrixK[1][3] = (c * D3 - c * D2) / 12;
                matrixK[1][4] = -((2 * b * b * c * c - a * a * b * b) * D3 - a * a * c * c * D1) / (18 * a * b * c);
                matrixK[1][5] = (a * D3 + a * D2) / 24;
                matrixK[1][6] = -(c * D3 + c * D2) / 12;
                matrixK[1][7] = -((2 * b * b * c * c - a * a * b * b) * D3 + 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[1][8] = -(a * D3 - a * D2) / 24;
                matrixK[1][9] = -(c * D3 - c * D2) / 12;
                matrixK[1][10] = ((b * b * c * c + a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (18 * a * b * c);
                matrixK[1][11] = -(a * D3 - a * D2) / 12;
                matrixK[1][12] = (c * D3 + c * D2) / 24;
                matrixK[1][13] = ((b * b * c * c - 2 * a * a * b * b) * D3 + a * a * c * c * D1) / (18 * a * b * c);
                matrixK[1][14] = (a * D3 - a * D2) / 12;
                matrixK[1][15] = (c * D3 - c * D2) / 24;
                matrixK[1][16] = -((2 * b * b * c * c + 2 * a * a * b * b) * D3 - a * a * c * c * D1) / (36 * a * b * c);
                matrixK[1][17] = (a * D3 - a * D2) / 24;
                matrixK[1][18] = -(c * D3 + c * D2) / 24;
                matrixK[1][19] = -((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (36 * a * b * c);
                matrixK[1][20] = -(a * D3 + a * D2) / 24;
                matrixK[1][21] = -(c * D3 - c * D2) / 24;
                matrixK[1][22] = ((b * b * c * c - 2 * a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[1][23] = -(a * D3 + a * D2) / 12;

                matrixK[2][0] = (b * D3 + b * D2) / 12;
                matrixK[2][1] = (a * D3 + a * D2) / 12;
                matrixK[2][2] = ((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (9 * a * b * c);
                matrixK[2][3] = (b * D3 - b * D2) / 12;
                matrixK[2][4] = (a * D3 + a * D2) / 24;
                matrixK[2][5] = -((2 * b * b - a * a) * c * c * D3 - a * a * b * b * D1) / (18 * a * b * c);
                matrixK[2][6] = (b * D3 - b * D2) / 24;
                matrixK[2][7] = (a * D3 - a * D2) / 24;
                matrixK[2][8] = -((2 * b * b + 2 * a * a) * c * c * D3 - a * a * b * b * D1) / (36 * a * b * c);
                matrixK[2][9] = (b * D3 + b * D2) / 24;
                matrixK[2][10] = (a * D3 - a * D2) / 12;
                matrixK[2][11] = ((b * b - 2 * a * a) * c * c * D3 + a * a * b * b * D1) / (18 * a * b * c);
                matrixK[2][12] = -(b * D3 - b * D2) / 12;
                matrixK[2][13] = -(a * D3 - a * D2) / 12;
                matrixK[2][14] = ((b * b + a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (18 * a * b * c);
                matrixK[2][15] = -(b * D3 + b * D2) / 12;
                matrixK[2][16] = -(a * D3 - a * D2) / 24;
                matrixK[2][17] = -((2 * b * b - a * a) * c * c * D3 + 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[2][18] = -(b * D3 + b * D2) / 24;
                matrixK[2][19] = -(a * D3 + a * D2) / 24;
                matrixK[2][20] = -((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (36 * a * b * c);
                matrixK[2][21] = -(b * D3 - b * D2) / 24;
                matrixK[2][22] = -(a * D3 + a * D2) / 12;
                matrixK[2][23] = ((b * b - 2 * a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (36 * a * b * c);

                matrixK[3][0] = ((a * a * c * c + a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (18 * a * b * c);
                matrixK[3][1] = (c * D3 - c * D2) / 12;
                matrixK[3][2] = (b * D3 - b * D2) / 12;
                matrixK[3][3] = ((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (9 * a * b * c);
                matrixK[3][4] = -(c * D3 + c * D2) / 12;
                matrixK[3][5] = -(b * D3 + b * D2) / 12;
                matrixK[3][6] = -((2 * a * a * c * c - a * a * b * b) * D3 - b * b * c * c * D1) / (18 * a * b * c);
                matrixK[3][7] = -(c * D3 - c * D2) / 12;
                matrixK[3][8] = -(b * D3 + b * D2) / 24;
                matrixK[3][9] = -((2 * a * a * c * c - a * a * b * b) * D3 + 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[3][10] = (c * D3 + c * D2) / 12;
                matrixK[3][11] = (b * D3 - b * D2) / 24;
                matrixK[3][12] = ((a * a * c * c - 2 * a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[3][13] = (c * D3 - c * D2) / 24;
                matrixK[3][14] = (b * D3 + b * D2) / 12;
                matrixK[3][15] = ((a * a * c * c - 2 * a * a * b * b) * D3 + b * b * c * c * D1) / (18 * a * b * c);
                matrixK[3][16] = -(c * D3 + c * D2) / 24;
                matrixK[3][17] = -(b * D3 - b * D2) / 12;
                matrixK[3][18] = -((2 * a * a * c * c + 2 * a * a * b * b) * D3 - b * b * c * c * D1) / (36 * a * b * c);
                matrixK[3][19] = -(c * D3 - c * D2) / 24;
                matrixK[3][20] = -(b * D3 - b * D2) / 24;
                matrixK[3][21] = -((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (36 * a * b * c);
                matrixK[3][22] = (c * D3 + c * D2) / 24;
                matrixK[3][23] = (b * D3 + b * D2) / 24;

                matrixK[4][0] = -(c * D3 - c * D2) / 12;
                matrixK[4][1] = -((2 * b * b * c * c - a * a * b * b) * D3 - a * a * c * c * D1) / (18 * a * b * c);
                matrixK[4][2] = (a * D3 + a * D2) / 24;
                matrixK[4][3] = -(c * D3 + c * D2) / 12;
                matrixK[4][4] = ((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (9 * a * b * c);
                matrixK[4][5] = (a * D3 + a * D2) / 12;
                matrixK[4][6] = (c * D3 - c * D2) / 12;
                matrixK[4][7] = ((b * b * c * c + a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (18 * a * b * c);
                matrixK[4][8] = -(a * D3 - a * D2) / 12;
                matrixK[4][9] = (c * D3 + c * D2) / 12;
                matrixK[4][10] = -((2 * b * b * c * c - a * a * b * b) * D3 + 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[4][11] = -(a * D3 - a * D2) / 24;
                matrixK[4][12] = -(c * D3 - c * D2) / 24;
                matrixK[4][13] = -((2 * b * b * c * c + 2 * a * a * b * b) * D3 - a * a * c * c * D1) / (36 * a * b * c);
                matrixK[4][14] = (a * D3 - a * D2) / 24;
                matrixK[4][15] = -(c * D3 + c * D2) / 24;
                matrixK[4][16] = ((b * b * c * c - 2 * a * a * b * b) * D3 + a * a * c * c * D1) / (18 * a * b * c);
                matrixK[4][17] = (a * D3 - a * D2) / 12;
                matrixK[4][18] = (c * D3 - c * D2) / 24;
                matrixK[4][19] = ((b * b * c * c - 2 * a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[4][20] = -(a * D3 + a * D2) / 12;
                matrixK[4][21] = (c * D3 + c * D2) / 24;
                matrixK[4][22] = -((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (36 * a * b * c);
                matrixK[4][23] = -(a * D3 + a * D2) / 24;

                matrixK[5][0] = -(b * D3 - b * D2) / 12;
                matrixK[5][1] = (a * D3 + a * D2) / 24;
                matrixK[5][2] = -((2 * b * b - a * a) * c * c * D3 - a * a * b * b * D1) / (18 * a * b * c);
                matrixK[5][3] = -(b * D3 + b * D2) / 12;
                matrixK[5][4] = (a * D3 + a * D2) / 12;
                matrixK[5][5] = ((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (9 * a * b * c);
                matrixK[5][6] = -(b * D3 + b * D2) / 24;
                matrixK[5][7] = (a * D3 - a * D2) / 12;
                matrixK[5][8] = ((b * b - 2 * a * a) * c * c * D3 + a * a * b * b * D1) / (18 * a * b * c);
                matrixK[5][9] = -(b * D3 - b * D2) / 24;
                matrixK[5][10] = (a * D3 - a * D2) / 24;
                matrixK[5][11] = -((2 * b * b + 2 * a * a) * c * c * D3 - a * a * b * b * D1) / (36 * a * b * c);
                matrixK[5][12] = (b * D3 + b * D2) / 12;
                matrixK[5][13] = -(a * D3 - a * D2) / 24;
                matrixK[5][14] = -((2 * b * b - a * a) * c * c * D3 + 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[5][15] = (b * D3 - b * D2) / 12;
                matrixK[5][16] = -(a * D3 - a * D2) / 12;
                matrixK[5][17] = ((b * b + a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (18 * a * b * c);
                matrixK[5][18] = (b * D3 - b * D2) / 24;
                matrixK[5][19] = -(a * D3 + a * D2) / 12;
                matrixK[5][20] = ((b * b - 2 * a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[5][21] = (b * D3 + b * D2) / 24;
                matrixK[5][22] = -(a * D3 + a * D2) / 24;
                matrixK[5][23] = -((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (36 * a * b * c);

                matrixK[6][0] = -((2 * a * a * c * c - a * a * b * b) * D3 + 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[6][1] = -(c * D3 + c * D2) / 12;
                matrixK[6][2] = (b * D3 - b * D2) / 24;
                matrixK[6][3] = -((2 * a * a * c * c - a * a * b * b) * D3 - b * b * c * c * D1) / (18 * a * b * c);
                matrixK[6][4] = (c * D3 - c * D2) / 12;
                matrixK[6][5] = -(b * D3 + b * D2) / 24;
                matrixK[6][6] = ((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (9 * a * b * c);
                matrixK[6][7] = (c * D3 + c * D2) / 12;
                matrixK[6][8] = -(b * D3 + b * D2) / 12;
                matrixK[6][9] = ((a * a * c * c + a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (18 * a * b * c);
                matrixK[6][10] = -(c * D3 - c * D2) / 12;
                matrixK[6][11] = (b * D3 - b * D2) / 12;
                matrixK[6][12] = -((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (36 * a * b * c);
                matrixK[6][13] = -(c * D3 + c * D2) / 24;
                matrixK[6][14] = (b * D3 + b * D2) / 24;
                matrixK[6][15] = -((2 * a * a * c * c + 2 * a * a * b * b) * D3 - b * b * c * c * D1) / (36 * a * b * c);
                matrixK[6][16] = (c * D3 - c * D2) / 24;
                matrixK[6][17] = -(b * D3 - b * D2) / 24;
                matrixK[6][18] = ((a * a * c * c - 2 * a * a * b * b) * D3 + b * b * c * c * D1) / (18 * a * b * c);
                matrixK[6][19] = (c * D3 + c * D2) / 24;
                matrixK[6][20] = -(b * D3 - b * D2) / 12;
                matrixK[6][21] = ((a * a * c * c - 2 * a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[6][22] = -(c * D3 - c * D2) / 24;
                matrixK[6][23] = (b * D3 + b * D2) / 12;

                matrixK[7][0] = -(c * D3 + c * D2) / 12;
                matrixK[7][1] = -((2 * b * b * c * c - a * a * b * b) * D3 + 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[7][2] = (a * D3 - a * D2) / 24;
                matrixK[7][3] = -(c * D3 - c * D2) / 12;
                matrixK[7][4] = ((b * b * c * c + a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (18 * a * b * c);
                matrixK[7][5] = (a * D3 - a * D2) / 12;
                matrixK[7][6] = (c * D3 + c * D2) / 12;
                matrixK[7][7] = ((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (9 * a * b * c);
                matrixK[7][8] = -(a * D3 + a * D2) / 12;
                matrixK[7][9] = (c * D3 - c * D2) / 12;
                matrixK[7][10] = -((2 * b * b * c * c - a * a * b * b) * D3 - a * a * c * c * D1) / (18 * a * b * c);
                matrixK[7][11] = -(a * D3 + a * D2) / 24;
                matrixK[7][12] = -(c * D3 + c * D2) / 24;
                matrixK[7][13] = -((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (36 * a * b * c);
                matrixK[7][14] = (a * D3 + a * D2) / 24;
                matrixK[7][15] = -(c * D3 - c * D2) / 24;
                matrixK[7][16] = ((b * b * c * c - 2 * a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[7][17] = (a * D3 + a * D2) / 12;
                matrixK[7][18] = (c * D3 + c * D2) / 24;
                matrixK[7][19] = ((b * b * c * c - 2 * a * a * b * b) * D3 + a * a * c * c * D1) / (18 * a * b * c);
                matrixK[7][20] = -(a * D3 - a * D2) / 12;
                matrixK[7][21] = (c * D3 - c * D2) / 24;
                matrixK[7][22] = -((2 * b * b * c * c + 2 * a * a * b * b) * D3 - a * a * c * c * D1) / (36 * a * b * c);
                matrixK[7][23] = -(a * D3 - a * D2) / 24;

                matrixK[8][0] = -(b * D3 - b * D2) / 24;
                matrixK[8][1] = -(a * D3 - a * D2) / 24;
                matrixK[8][2] = -((2 * b * b + 2 * a * a) * c * c * D3 - a * a * b * b * D1) / (36 * a * b * c);
                matrixK[8][3] = -(b * D3 + b * D2) / 24;
                matrixK[8][4] = -(a * D3 - a * D2) / 12;
                matrixK[8][5] = ((b * b - 2 * a * a) * c * c * D3 + a * a * b * b * D1) / (18 * a * b * c);
                matrixK[8][6] = -(b * D3 + b * D2) / 12;
                matrixK[8][7] = -(a * D3 + a * D2) / 12;
                matrixK[8][8] = ((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (9 * a * b * c);
                matrixK[8][9] = -(b * D3 - b * D2) / 12;
                matrixK[8][10] = -(a * D3 + a * D2) / 24;
                matrixK[8][11] = -((2 * b * b - a * a) * c * c * D3 - a * a * b * b * D1) / (18 * a * b * c);
                matrixK[8][12] = (b * D3 + b * D2) / 24;
                matrixK[8][13] = (a * D3 + a * D2) / 24;
                matrixK[8][14] = -((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (36 * a * b * c);
                matrixK[8][15] = (b * D3 - b * D2) / 24;
                matrixK[8][16] = (a * D3 + a * D2) / 12;
                matrixK[8][17] = ((b * b - 2 * a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[8][18] = (b * D3 - b * D2) / 12;
                matrixK[8][19] = (a * D3 - a * D2) / 12;
                matrixK[8][20] = ((b * b + a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (18 * a * b * c);
                matrixK[8][21] = (b * D3 + b * D2) / 12;
                matrixK[8][22] = (a * D3 - a * D2) / 24;
                matrixK[8][23] = -((2 * b * b - a * a) * c * c * D3 + 2 * a * a * b * b * D1) / (36 * a * b * c);

                matrixK[9][0] = -((2 * a * a * c * c - a * a * b * b) * D3 - b * b * c * c * D1) / (18 * a * b * c);
                matrixK[9][1] = -(c * D3 - c * D2) / 12;
                matrixK[9][2] = (b * D3 + b * D2) / 24;
                matrixK[9][3] = -((2 * a * a * c * c - a * a * b * b) * D3 + 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[9][4] = (c * D3 + c * D2) / 12;
                matrixK[9][5] = -(b * D3 - b * D2) / 24;
                matrixK[9][6] = ((a * a * c * c + a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (18 * a * b * c);
                matrixK[9][7] = (c * D3 - c * D2) / 12;
                matrixK[9][8] = -(b * D3 - b * D2) / 12;
                matrixK[9][9] = ((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (9 * a * b * c);
                matrixK[9][10] = -(c * D3 + c * D2) / 12;
                matrixK[9][11] = (b * D3 + b * D2) / 12;
                matrixK[9][12] = -((2 * a * a * c * c + 2 * a * a * b * b) * D3 - b * b * c * c * D1) / (36 * a * b * c);
                matrixK[9][13] = -(c * D3 - c * D2) / 24;
                matrixK[9][14] = (b * D3 - b * D2) / 24;
                matrixK[9][15] = -((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (36 * a * b * c);
                matrixK[9][16] = (c * D3 + c * D2) / 24;
                matrixK[9][17] = -(b * D3 + b * D2) / 24;
                matrixK[9][18] = ((a * a * c * c - 2 * a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[9][19] = (c * D3 - c * D2) / 24;
                matrixK[9][20] = -(b * D3 + b * D2) / 12;
                matrixK[9][21] = ((a * a * c * c - 2 * a * a * b * b) * D3 + b * b * c * c * D1) / (18 * a * b * c);
                matrixK[9][22] = -(c * D3 + c * D2) / 24;
                matrixK[9][23] = (b * D3 - b * D2) / 12;

                matrixK[10][0] = (c * D3 - c * D2) / 12;
                matrixK[10][1] = ((b * b * c * c + a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (18 * a * b * c);
                matrixK[10][2] = (a * D3 - a * D2) / 12;
                matrixK[10][3] = (c * D3 + c * D2) / 12;
                matrixK[10][4] = -((2 * b * b * c * c - a * a * b * b) * D3 + 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[10][5] = (a * D3 - a * D2) / 24;
                matrixK[10][6] = -(c * D3 - c * D2) / 12;
                matrixK[10][7] = -((2 * b * b * c * c - a * a * b * b) * D3 - a * a * c * c * D1) / (18 * a * b * c);
                matrixK[10][8] = -(a * D3 + a * D2) / 24;
                matrixK[10][9] = -(c * D3 + c * D2) / 12;
                matrixK[10][10] = ((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (9 * a * b * c);
                matrixK[10][11] = -(a * D3 + a * D2) / 12;
                matrixK[10][12] = (c * D3 - c * D2) / 24;
                matrixK[10][13] = ((b * b * c * c - 2 * a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[10][14] = (a * D3 + a * D2) / 12;
                matrixK[10][15] = (c * D3 + c * D2) / 24;
                matrixK[10][16] = -((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (36 * a * b * c);
                matrixK[10][17] = (a * D3 + a * D2) / 24;
                matrixK[10][18] = -(c * D3 - c * D2) / 24;
                matrixK[10][19] = -((2 * b * b * c * c + 2 * a * a * b * b) * D3 - a * a * c * c * D1) / (36 * a * b * c);
                matrixK[10][20] = -(a * D3 - a * D2) / 24;
                matrixK[10][21] = -(c * D3 + c * D2) / 24;
                matrixK[10][22] = ((b * b * c * c - 2 * a * a * b * b) * D3 + a * a * c * c * D1) / (18 * a * b * c);
                matrixK[10][23] = -(a * D3 - a * D2) / 12;

                matrixK[11][0] = (b * D3 + b * D2) / 24;
                matrixK[11][1] = -(a * D3 - a * D2) / 12;
                matrixK[11][2] = ((b * b - 2 * a * a) * c * c * D3 + a * a * b * b * D1) / (18 * a * b * c);
                matrixK[11][3] = (b * D3 - b * D2) / 24;
                matrixK[11][4] = -(a * D3 - a * D2) / 24;
                matrixK[11][5] = -((2 * b * b + 2 * a * a) * c * c * D3 - a * a * b * b * D1) / (36 * a * b * c);
                matrixK[11][6] = (b * D3 - b * D2) / 12;
                matrixK[11][7] = -(a * D3 + a * D2) / 24;
                matrixK[11][8] = -((2 * b * b - a * a) * c * c * D3 - a * a * b * b * D1) / (18 * a * b * c);
                matrixK[11][9] = (b * D3 + b * D2) / 12;
                matrixK[11][10] = -(a * D3 + a * D2) / 12;
                matrixK[11][11] = ((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (9 * a * b * c);
                matrixK[11][12] = -(b * D3 - b * D2) / 24;
                matrixK[11][13] = (a * D3 + a * D2) / 12;
                matrixK[11][14] = ((b * b - 2 * a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[11][15] = -(b * D3 + b * D2) / 24;
                matrixK[11][16] = (a * D3 + a * D2) / 24;
                matrixK[11][17] = -((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (36 * a * b * c);
                matrixK[11][18] = -(b * D3 + b * D2) / 12;
                matrixK[11][19] = (a * D3 - a * D2) / 24;
                matrixK[11][20] = -((2 * b * b - a * a) * c * c * D3 + 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[11][21] = -(b * D3 - b * D2) / 12;
                matrixK[11][22] = (a * D3 - a * D2) / 12;
                matrixK[11][23] = ((b * b + a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (18 * a * b * c);

                matrixK[12][0] = ((a * a * c * c - 2 * a * a * b * b) * D3 + b * b * c * c * D1) / (18 * a * b * c);
                matrixK[12][1] = (c * D3 + c * D2) / 24;
                matrixK[12][2] = -(b * D3 - b * D2) / 12;
                matrixK[12][3] = ((a * a * c * c - 2 * a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[12][4] = -(c * D3 - c * D2) / 24;
                matrixK[12][5] = (b * D3 + b * D2) / 12;
                matrixK[12][6] = -((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (36 * a * b * c);
                matrixK[12][7] = -(c * D3 + c * D2) / 24;
                matrixK[12][8] = (b * D3 + b * D2) / 24;
                matrixK[12][9] = -((2 * a * a * c * c + 2 * a * a * b * b) * D3 - b * b * c * c * D1) / (36 * a * b * c);
                matrixK[12][10] = (c * D3 - c * D2) / 24;
                matrixK[12][11] = -(b * D3 - b * D2) / 24;
                matrixK[12][12] = ((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (9 * a * b * c);
                matrixK[12][13] = (c * D3 + c * D2) / 12;
                matrixK[12][14] = -(b * D3 + b * D2) / 12;
                matrixK[12][15] = ((a * a * c * c + a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (18 * a * b * c);
                matrixK[12][16] = -(c * D3 - c * D2) / 12;
                matrixK[12][17] = (b * D3 - b * D2) / 12;
                matrixK[12][18] = -((2 * a * a * c * c - a * a * b * b) * D3 + 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[12][19] = -(c * D3 + c * D2) / 12;
                matrixK[12][20] = (b * D3 - b * D2) / 24;
                matrixK[12][21] = -((2 * a * a * c * c - a * a * b * b) * D3 - b * b * c * c * D1) / (18 * a * b * c);
                matrixK[12][22] = (c * D3 - c * D2) / 12;
                matrixK[12][23] = -(b * D3 + b * D2) / 24;

                matrixK[13][0] = (c * D3 + c * D2) / 24;
                matrixK[13][1] = ((b * b * c * c - 2 * a * a * b * b) * D3 + a * a * c * c * D1) / (18 * a * b * c);
                matrixK[13][2] = -(a * D3 - a * D2) / 12;
                matrixK[13][3] = (c * D3 - c * D2) / 24;
                matrixK[13][4] = -((2 * b * b * c * c + 2 * a * a * b * b) * D3 - a * a * c * c * D1) / (36 * a * b * c);
                matrixK[13][5] = -(a * D3 - a * D2) / 24;
                matrixK[13][6] = -(c * D3 + c * D2) / 24;
                matrixK[13][7] = -((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (36 * a * b * c);
                matrixK[13][8] = (a * D3 + a * D2) / 24;
                matrixK[13][9] = -(c * D3 - c * D2) / 24;
                matrixK[13][10] = ((b * b * c * c - 2 * a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[13][11] = (a * D3 + a * D2) / 12;
                matrixK[13][12] = (c * D3 + c * D2) / 12;
                matrixK[13][13] = ((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (9 * a * b * c);
                matrixK[13][14] = -(a * D3 + a * D2) / 12;
                matrixK[13][15] = (c * D3 - c * D2) / 12;
                matrixK[13][16] = -((2 * b * b * c * c - a * a * b * b) * D3 - a * a * c * c * D1) / (18 * a * b * c);
                matrixK[13][17] = -(a * D3 + a * D2) / 24;
                matrixK[13][18] = -(c * D3 + c * D2) / 12;
                matrixK[13][19] = -((2 * b * b * c * c - a * a * b * b) * D3 + 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[13][20] = (a * D3 - a * D2) / 24;
                matrixK[13][21] = -(c * D3 - c * D2) / 12;
                matrixK[13][22] = ((b * b * c * c + a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (18 * a * b * c);
                matrixK[13][23] = (a * D3 - a * D2) / 12;

                matrixK[14][0] = (b * D3 - b * D2) / 12;
                matrixK[14][1] = (a * D3 - a * D2) / 12;
                matrixK[14][2] = ((b * b + a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (18 * a * b * c);
                matrixK[14][3] = (b * D3 + b * D2) / 12;
                matrixK[14][4] = (a * D3 - a * D2) / 24;
                matrixK[14][5] = -((2 * b * b - a * a) * c * c * D3 + 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[14][6] = (b * D3 + b * D2) / 24;
                matrixK[14][7] = (a * D3 + a * D2) / 24;
                matrixK[14][8] = -((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (36 * a * b * c);
                matrixK[14][9] = (b * D3 - b * D2) / 24;
                matrixK[14][10] = (a * D3 + a * D2) / 12;
                matrixK[14][11] = ((b * b - 2 * a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[14][12] = -(b * D3 + b * D2) / 12;
                matrixK[14][13] = -(a * D3 + a * D2) / 12;
                matrixK[14][14] = ((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (9 * a * b * c);
                matrixK[14][15] = -(b * D3 - b * D2) / 12;
                matrixK[14][16] = -(a * D3 + a * D2) / 24;
                matrixK[14][17] = -((2 * b * b - a * a) * c * c * D3 - a * a * b * b * D1) / (18 * a * b * c);
                matrixK[14][18] = -(b * D3 - b * D2) / 24;
                matrixK[14][19] = -(a * D3 - a * D2) / 24;
                matrixK[14][20] = -((2 * b * b + 2 * a * a) * c * c * D3 - a * a * b * b * D1) / (36 * a * b * c);
                matrixK[14][21] = -(b * D3 + b * D2) / 24;
                matrixK[14][22] = -(a * D3 - a * D2) / 12;
                matrixK[14][23] = ((b * b - 2 * a * a) * c * c * D3 + a * a * b * b * D1) / (18 * a * b * c);

                matrixK[15][0] = ((a * a * c * c - 2 * a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[15][1] = (c * D3 - c * D2) / 24;
                matrixK[15][2] = -(b * D3 + b * D2) / 12;
                matrixK[15][3] = ((a * a * c * c - 2 * a * a * b * b) * D3 + b * b * c * c * D1) / (18 * a * b * c);
                matrixK[15][4] = -(c * D3 + c * D2) / 24;
                matrixK[15][5] = (b * D3 - b * D2) / 12;
                matrixK[15][6] = -((2 * a * a * c * c + 2 * a * a * b * b) * D3 - b * b * c * c * D1) / (36 * a * b * c);
                matrixK[15][7] = -(c * D3 - c * D2) / 24;
                matrixK[15][8] = (b * D3 - b * D2) / 24;
                matrixK[15][9] = -((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (36 * a * b * c);
                matrixK[15][10] = (c * D3 + c * D2) / 24;
                matrixK[15][11] = -(b * D3 + b * D2) / 24;
                matrixK[15][12] = ((a * a * c * c + a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (18 * a * b * c);
                matrixK[15][13] = (c * D3 - c * D2) / 12;
                matrixK[15][14] = -(b * D3 - b * D2) / 12;
                matrixK[15][15] = ((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (9 * a * b * c);
                matrixK[15][16] = -(c * D3 + c * D2) / 12;
                matrixK[15][17] = (b * D3 + b * D2) / 12;
                matrixK[15][18] = -((2 * a * a * c * c - a * a * b * b) * D3 - b * b * c * c * D1) / (18 * a * b * c);
                matrixK[15][19] = -(c * D3 - c * D2) / 12;
                matrixK[15][20] = (b * D3 + b * D2) / 24;
                matrixK[15][21] = -((2 * a * a * c * c - a * a * b * b) * D3 + 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[15][22] = (c * D3 + c * D2) / 12;
                matrixK[15][23] = -(b * D3 - b * D2) / 24;

                matrixK[16][0] = -(c * D3 - c * D2) / 24;
                matrixK[16][1] = -((2 * b * b * c * c + 2 * a * a * b * b) * D3 - a * a * c * c * D1) / (36 * a * b * c);
                matrixK[16][2] = -(a * D3 - a * D2) / 24;
                matrixK[16][3] = -(c * D3 + c * D2) / 24;
                matrixK[16][4] = ((b * b * c * c - 2 * a * a * b * b) * D3 + a * a * c * c * D1) / (18 * a * b * c);
                matrixK[16][5] = -(a * D3 - a * D2) / 12;
                matrixK[16][6] = (c * D3 - c * D2) / 24;
                matrixK[16][7] = ((b * b * c * c - 2 * a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[16][8] = (a * D3 + a * D2) / 12;
                matrixK[16][9] = (c * D3 + c * D2) / 24;
                matrixK[16][10] = -((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (36 * a * b * c);
                matrixK[16][11] = (a * D3 + a * D2) / 24;
                matrixK[16][12] = -(c * D3 - c * D2) / 12;
                matrixK[16][13] = -((2 * b * b * c * c - a * a * b * b) * D3 - a * a * c * c * D1) / (18 * a * b * c);
                matrixK[16][14] = -(a * D3 + a * D2) / 24;
                matrixK[16][15] = -(c * D3 + c * D2) / 12;
                matrixK[16][16] = ((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (9 * a * b * c);
                matrixK[16][17] = -(a * D3 + a * D2) / 12;
                matrixK[16][18] = (c * D3 - c * D2) / 12;
                matrixK[16][19] = ((b * b * c * c + a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (18 * a * b * c);
                matrixK[16][20] = (a * D3 - a * D2) / 12;
                matrixK[16][21] = (c * D3 + c * D2) / 12;
                matrixK[16][22] = -((2 * b * b * c * c - a * a * b * b) * D3 + 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[16][23] = (a * D3 - a * D2) / 24;

                matrixK[17][0] = -(b * D3 + b * D2) / 12;
                matrixK[17][1] = (a * D3 - a * D2) / 24;
                matrixK[17][2] = -((2 * b * b - a * a) * c * c * D3 + 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[17][3] = -(b * D3 - b * D2) / 12;
                matrixK[17][4] = (a * D3 - a * D2) / 12;
                matrixK[17][5] = ((b * b + a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (18 * a * b * c);
                matrixK[17][6] = -(b * D3 - b * D2) / 24;
                matrixK[17][7] = (a * D3 + a * D2) / 12;
                matrixK[17][8] = ((b * b - 2 * a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[17][9] = -(b * D3 + b * D2) / 24;
                matrixK[17][10] = (a * D3 + a * D2) / 24;
                matrixK[17][11] = -((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (36 * a * b * c);
                matrixK[17][12] = (b * D3 - b * D2) / 12;
                matrixK[17][13] = -(a * D3 + a * D2) / 24;
                matrixK[17][14] = -((2 * b * b - a * a) * c * c * D3 - a * a * b * b * D1) / (18 * a * b * c);
                matrixK[17][15] = (b * D3 + b * D2) / 12;
                matrixK[17][16] = -(a * D3 + a * D2) / 12;
                matrixK[17][17] = ((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (9 * a * b * c);
                matrixK[17][18] = (b * D3 + b * D2) / 24;
                matrixK[17][19] = -(a * D3 - a * D2) / 12;
                matrixK[17][20] = ((b * b - 2 * a * a) * c * c * D3 + a * a * b * b * D1) / (18 * a * b * c);
                matrixK[17][21] = (b * D3 - b * D2) / 24;
                matrixK[17][22] = -(a * D3 - a * D2) / 24;
                matrixK[17][23] = -((2 * b * b + 2 * a * a) * c * c * D3 - a * a * b * b * D1) / (36 * a * b * c);

                matrixK[18][0] = -((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (36 * a * b * c);
                matrixK[18][1] = -(c * D3 + c * D2) / 24;
                matrixK[18][2] = -(b * D3 + b * D2) / 24;
                matrixK[18][3] = -((2 * a * a * c * c + 2 * a * a * b * b) * D3 - b * b * c * c * D1) / (36 * a * b * c);
                matrixK[18][4] = (c * D3 - c * D2) / 24;
                matrixK[18][5] = (b * D3 - b * D2) / 24;
                matrixK[18][6] = ((a * a * c * c - 2 * a * a * b * b) * D3 + b * b * c * c * D1) / (18 * a * b * c);
                matrixK[18][7] = (c * D3 + c * D2) / 24;
                matrixK[18][8] = (b * D3 - b * D2) / 12;
                matrixK[18][9] = ((a * a * c * c - 2 * a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[18][10] = -(c * D3 - c * D2) / 24;
                matrixK[18][11] = -(b * D3 + b * D2) / 12;
                matrixK[18][12] = -((2 * a * a * c * c - a * a * b * b) * D3 + 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[18][13] = -(c * D3 + c * D2) / 12;
                matrixK[18][14] = -(b * D3 - b * D2) / 24;
                matrixK[18][15] = -((2 * a * a * c * c - a * a * b * b) * D3 - b * b * c * c * D1) / (18 * a * b * c);
                matrixK[18][16] = (c * D3 - c * D2) / 12;
                matrixK[18][17] = (b * D3 + b * D2) / 24;
                matrixK[18][18] = ((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (9 * a * b * c);
                matrixK[18][19] = (c * D3 + c * D2) / 12;
                matrixK[18][20] = (b * D3 + b * D2) / 12;
                matrixK[18][21] = ((a * a * c * c + a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (18 * a * b * c);
                matrixK[18][22] = -(c * D3 - c * D2) / 12;
                matrixK[18][23] = -(b * D3 - b * D2) / 12;

                matrixK[19][0] = -(c * D3 + c * D2) / 24;
                matrixK[19][1] = -((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (36 * a * b * c);
                matrixK[19][2] = -(a * D3 + a * D2) / 24;
                matrixK[19][3] = -(c * D3 - c * D2) / 24;
                matrixK[19][4] = ((b * b * c * c - 2 * a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[19][5] = -(a * D3 + a * D2) / 12;
                matrixK[19][6] = (c * D3 + c * D2) / 24;
                matrixK[19][7] = ((b * b * c * c - 2 * a * a * b * b) * D3 + a * a * c * c * D1) / (18 * a * b * c);
                matrixK[19][8] = (a * D3 - a * D2) / 12;
                matrixK[19][9] = (c * D3 - c * D2) / 24;
                matrixK[19][10] = -((2 * b * b * c * c + 2 * a * a * b * b) * D3 - a * a * c * c * D1) / (36 * a * b * c);
                matrixK[19][11] = (a * D3 - a * D2) / 24;
                matrixK[19][12] = -(c * D3 + c * D2) / 12;
                matrixK[19][13] = -((2 * b * b * c * c - a * a * b * b) * D3 + 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[19][14] = -(a * D3 - a * D2) / 24;
                matrixK[19][15] = -(c * D3 - c * D2) / 12;
                matrixK[19][16] = ((b * b * c * c + a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (18 * a * b * c);
                matrixK[19][17] = -(a * D3 - a * D2) / 12;
                matrixK[19][18] = (c * D3 + c * D2) / 12;
                matrixK[19][19] = ((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (9 * a * b * c);
                matrixK[19][20] = (a * D3 + a * D2) / 12;
                matrixK[19][21] = (c * D3 - c * D2) / 12;
                matrixK[19][22] = -((2 * b * b * c * c - a * a * b * b) * D3 - a * a * c * c * D1) / (18 * a * b * c);
                matrixK[19][23] = (a * D3 + a * D2) / 24;

                matrixK[20][0] = -(b * D3 + b * D2) / 24;
                matrixK[20][1] = -(a * D3 + a * D2) / 24;
                matrixK[20][2] = -((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (36 * a * b * c);
                matrixK[20][3] = -(b * D3 - b * D2) / 24;
                matrixK[20][4] = -(a * D3 + a * D2) / 12;
                matrixK[20][5] = ((b * b - 2 * a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[20][6] = -(b * D3 - b * D2) / 12;
                matrixK[20][7] = -(a * D3 - a * D2) / 12;
                matrixK[20][8] = ((b * b + a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (18 * a * b * c);
                matrixK[20][9] = -(b * D3 + b * D2) / 12;
                matrixK[20][10] = -(a * D3 - a * D2) / 24;
                matrixK[20][11] = -((2 * b * b - a * a) * c * c * D3 + 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[20][12] = (b * D3 - b * D2) / 24;
                matrixK[20][13] = (a * D3 - a * D2) / 24;
                matrixK[20][14] = -((2 * b * b + 2 * a * a) * c * c * D3 - a * a * b * b * D1) / (36 * a * b * c);
                matrixK[20][15] = (b * D3 + b * D2) / 24;
                matrixK[20][16] = (a * D3 - a * D2) / 12;
                matrixK[20][17] = ((b * b - 2 * a * a) * c * c * D3 + a * a * b * b * D1) / (18 * a * b * c);
                matrixK[20][18] = (b * D3 + b * D2) / 12;
                matrixK[20][19] = (a * D3 + a * D2) / 12;
                matrixK[20][20] = ((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (9 * a * b * c);
                matrixK[20][21] = (b * D3 - b * D2) / 12;
                matrixK[20][22] = (a * D3 + a * D2) / 24;
                matrixK[20][23] = -((2 * b * b - a * a) * c * c * D3 - a * a * b * b * D1) / (18 * a * b * c);

                matrixK[21][0] = -((2 * a * a * c * c + 2 * a * a * b * b) * D3 - b * b * c * c * D1) / (36 * a * b * c);
                matrixK[21][1] = -(c * D3 - c * D2) / 24;
                matrixK[21][2] = -(b * D3 - b * D2) / 24;
                matrixK[21][3] = -((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (36 * a * b * c);
                matrixK[21][4] = (c * D3 + c * D2) / 24;
                matrixK[21][5] = (b * D3 + b * D2) / 24;
                matrixK[21][6] = ((a * a * c * c - 2 * a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[21][7] = (c * D3 - c * D2) / 24;
                matrixK[21][8] = (b * D3 + b * D2) / 12;
                matrixK[21][9] = ((a * a * c * c - 2 * a * a * b * b) * D3 + b * b * c * c * D1) / (18 * a * b * c);
                matrixK[21][10] = -(c * D3 + c * D2) / 24;
                matrixK[21][11] = -(b * D3 - b * D2) / 12;
                matrixK[21][12] = -((2 * a * a * c * c - a * a * b * b) * D3 - b * b * c * c * D1) / (18 * a * b * c);
                matrixK[21][13] = -(c * D3 - c * D2) / 12;
                matrixK[21][14] = -(b * D3 + b * D2) / 24;
                matrixK[21][15] = -((2 * a * a * c * c - a * a * b * b) * D3 + 2 * b * b * c * c * D1) / (36 * a * b * c);
                matrixK[21][16] = (c * D3 + c * D2) / 12;
                matrixK[21][17] = (b * D3 - b * D2) / 24;
                matrixK[21][18] = ((a * a * c * c + a * a * b * b) * D3 - 2 * b * b * c * c * D1) / (18 * a * b * c);
                matrixK[21][19] = (c * D3 - c * D2) / 12;
                matrixK[21][20] = (b * D3 - b * D2) / 12;
                matrixK[21][21] = ((a * a * c * c + a * a * b * b) * D3 + b * b * c * c * D1) / (9 * a * b * c);
                matrixK[21][22] = -(c * D3 + c * D2) / 12;
                matrixK[21][23] = -(b * D3 + b * D2) / 12;

                matrixK[22][0] = (c * D3 - c * D2) / 24;
                matrixK[22][1] = ((b * b * c * c - 2 * a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[22][2] = -(a * D3 + a * D2) / 12;
                matrixK[22][3] = (c * D3 + c * D2) / 24;
                matrixK[22][4] = -((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (36 * a * b * c);
                matrixK[22][5] = -(a * D3 + a * D2) / 24;
                matrixK[22][6] = -(c * D3 - c * D2) / 24;
                matrixK[22][7] = -((2 * b * b * c * c + 2 * a * a * b * b) * D3 - a * a * c * c * D1) / (36 * a * b * c);
                matrixK[22][8] = (a * D3 - a * D2) / 24;
                matrixK[22][9] = -(c * D3 + c * D2) / 24;
                matrixK[22][10] = ((b * b * c * c - 2 * a * a * b * b) * D3 + a * a * c * c * D1) / (18 * a * b * c);
                matrixK[22][11] = (a * D3 - a * D2) / 12;
                matrixK[22][12] = (c * D3 - c * D2) / 12;
                matrixK[22][13] = ((b * b * c * c + a * a * b * b) * D3 - 2 * a * a * c * c * D1) / (18 * a * b * c);
                matrixK[22][14] = -(a * D3 - a * D2) / 12;
                matrixK[22][15] = (c * D3 + c * D2) / 12;
                matrixK[22][16] = -((2 * b * b * c * c - a * a * b * b) * D3 + 2 * a * a * c * c * D1) / (36 * a * b * c);
                matrixK[22][17] = -(a * D3 - a * D2) / 24;
                matrixK[22][18] = -(c * D3 - c * D2) / 12;
                matrixK[22][19] = -((2 * b * b * c * c - a * a * b * b) * D3 - a * a * c * c * D1) / (18 * a * b * c);
                matrixK[22][20] = (a * D3 + a * D2) / 24;
                matrixK[22][21] = -(c * D3 + c * D2) / 12;
                matrixK[22][22] = ((b * b * c * c + a * a * b * b) * D3 + a * a * c * c * D1) / (9 * a * b * c);
                matrixK[22][23] = (a * D3 + a * D2) / 12;

                matrixK[23][0] = (b * D3 - b * D2) / 24;
                matrixK[23][1] = -(a * D3 + a * D2) / 12;
                matrixK[23][2] = ((b * b - 2 * a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[23][3] = (b * D3 + b * D2) / 24;
                matrixK[23][4] = -(a * D3 + a * D2) / 24;
                matrixK[23][5] = -((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (36 * a * b * c);
                matrixK[23][6] = (b * D3 + b * D2) / 12;
                matrixK[23][7] = -(a * D3 - a * D2) / 24;
                matrixK[23][8] = -((2 * b * b - a * a) * c * c * D3 + 2 * a * a * b * b * D1) / (36 * a * b * c);
                matrixK[23][9] = (b * D3 - b * D2) / 12;
                matrixK[23][10] = -(a * D3 - a * D2) / 12;
                matrixK[23][11] = ((b * b + a * a) * c * c * D3 - 2 * a * a * b * b * D1) / (18 * a * b * c);
                matrixK[23][12] = -(b * D3 + b * D2) / 24;
                matrixK[23][13] = (a * D3 - a * D2) / 12;
                matrixK[23][14] = ((b * b - 2 * a * a) * c * c * D3 + a * a * b * b * D1) / (18 * a * b * c);
                matrixK[23][15] = -(b * D3 - b * D2) / 24;
                matrixK[23][16] = (a * D3 - a * D2) / 24;
                matrixK[23][17] = -((2 * b * b + 2 * a * a) * c * c * D3 - a * a * b * b * D1) / (36 * a * b * c);
                matrixK[23][18] = -(b * D3 - b * D2) / 12;
                matrixK[23][19] = (a * D3 + a * D2) / 24;
                matrixK[23][20] = -((2 * b * b - a * a) * c * c * D3 - a * a * b * b * D1) / (18 * a * b * c);
                matrixK[23][21] = -(b * D3 + b * D2) / 12;
                matrixK[23][22] = (a * D3 + a * D2) / 12;
                matrixK[23][23] = ((b * b + a * a) * c * c * D3 + a * a * b * b * D1) / (9 * a * b * c);
            } else {
                matrixK = null;
            }
        } else {
            matrixK = null;
        }

        return matrixK;
    }
}
